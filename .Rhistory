library(tidyverse)
library(plotly)
library(shiny)
HW <-tibble(
id = c("Lahav", "Ben", "Lia", "Haari", "Maya", "Oren", "Arie", "Lili", "Michal", "Or"),
height = c(15.1, 17.4, 14.5, 18.6, 12.8, 13.6, 17.9, 16.3, 15.2, 13.4),
weight = c(16.3, 18.1, 16.0, 19.1, 14.7, 15.7, 17.6, 17.2, 16.2, 15.2)
)
############3############3############3############3############3############3############3############3############
##############################################################################################################################
ui <- fluidPage(
sliderInput("y_intercept", "Y-Intercept", min = -20, max = 10, step = 0.1, value = 1),
sliderInput("slope", "Slope", min = 0, max = 1, step = 0.01, value = 0.5),
plotOutput("plot")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
# Create a data frame with x values
x <- HW$height
df <- data.frame(x_hw = x, y_hw = input$y_intercept + input$slope * x, data_y = HW$weight)
# Create a ggplot with a straight line
p <- ggplot(df, aes(x_hw, y_hw)) +
geom_line(aes(color = "red")) +
xlim(0, 20) +
ylim(0, 20) +
geom_point(data = HW, mapping = aes(x = height, y = weight)) +
labs(x = "height", y = "weight") +
geom_segment(mapping = aes(x = x_hw, y = data_y, xend = x_hw, yend = y_hw))
ggplotly(p)
})
}
shinyApp(ui, server)
server <- function(input, output, session) {
output$plot <- renderPlot({
# Create a data frame with x values
x <- HW$height
df <- data.frame(x_hw = x, y_hw = input$y_intercept + input$slope * x, data_y = HW$weight)
# Create a ggplot with a straight line
p <- ggplot(df, aes(x_hw, y_hw)) +
geom_line(aes(color = "red")) +
xlim(0, 20) +
ylim(0, 20) +
geom_point(data = HW, mapping = aes(x = height, y = weight)) +
labs(x = "height", y = "weight") +
geom_segment(mapping = aes(x = x_hw, y = data_y, xend = x_hw, yend = y_hw))
print(ggplotly(p))
})
}
shinyApp(ui, server)
server <- function(input, output, session) {
output$plot <- renderPlot({
# Create a data frame with x values
x <- HW$height
df <- data.frame(x_hw = x, y_hw = input$y_intercept + input$slope * x, data_y = HW$weight)
# Create a ggplot with a straight line
p <- ggplot(df, aes(x_hw, y_hw)) +
geom_line(aes(color = "red")) +
xlim(0, 20) +
ylim(0, 20) +
geom_point(data = HW, mapping = aes(x = height, y = weight)) +
labs(x = "height", y = "weight") +
geom_segment(mapping = aes(x = x_hw, y = data_y, xend = x_hw, yend = y_hw))
print(p)
})
}
shinyApp(ui, server)
pggplotly(p)
server <- function(input, output, session) {
output$plot <- renderPlot({
# Create a data frame with x values
x <- HW$height
df <- data.frame(x_hw = x, y_hw = input$y_intercept + input$slope * x, data_y = HW$weight)
# Create a ggplot with a straight line
p <- ggplot(df, aes(x_hw, y_hw)) +
geom_line(aes(color = "red")) +
xlim(0, 20) +
ylim(0, 20) +
geom_point(data = HW, mapping = aes(x = height, y = weight)) +
labs(x = "height", y = "weight") +
geom_segment(mapping = aes(x = x_hw, y = data_y, xend = x_hw, yend = y_hw))
pggplotly(p)
})
}
shinyApp(ui, server)
server <- function(input, output, session) {
output$plot <- renderPlot({
# Create a data frame with x values
x <- HW$height
df <- data.frame(x_hw = x, y_hw = input$y_intercept + input$slope * x, data_y = HW$weight)
# Create a ggplot with a straight line
p <- ggplot(df, aes(x_hw, y_hw)) +
geom_line(aes(color = "red")) +
xlim(0, 20) +
ylim(0, 20) +
geom_point(data = HW, mapping = aes(x = height, y = weight)) +
labs(x = "height", y = "weight") +
geom_segment(mapping = aes(x = x_hw, y = data_y, xend = x_hw, yend = y_hw))
ggplotly(p)
})
}
shinyApp(ui, server)
server <- function(input, output, session) {
output$plot <- renderPlotly({
# Create a data frame with x values
x <- HW$height
df <- data.frame(x_hw = x, y_hw = input$y_intercept + input$slope * x, data_y = HW$weight)
# Create a ggplot with a straight line
p <- ggplot(df, aes(x_hw, y_hw)) +
geom_line(aes(color = "red")) +
xlim(0, 20) +
ylim(0, 20) +
geom_point(data = HW, mapping = aes(x = height, y = weight)) +
labs(x = "height", y = "weight") +
geom_segment(mapping = aes(x = x_hw, y = data_y, xend = x_hw, yend = y_hw))
# Convert ggplot to a plotly object
ggplotly(p)
})
}
shinyApp(ui, server)
server <- function(input, output, session) {
output$plot <- renderPlot({
# Create a data frame with x values
x <- HW$height
df <- data.frame(x_hw = x, y_hw = input$y_intercept + input$slope * x, data_y = HW$weight)
# Create a ggplot with a straight line
p <- ggplot(df, aes(x_hw, y_hw)) +
geom_line(aes(color = "red")) +
xlim(0, 20) +
ylim(0, 20) +
geom_point(data = HW, mapping = aes(x = height, y = weight)) +
labs(x = "height", y = "weight") +
geom_segment(mapping = aes(x = x_hw, y = data_y, xend = x_hw, yend = y_hw))
print(p)
})
}
shinyApp(ui, server)
HW <-tibble(
id = c("Lahav", "Ben", "Lia", "Haari", "Maya", "Oren", "Arie", "Lili", "Michal", "Or"),
height = c(15.1, 17.4, 14.5, 18.6, 1.28, 13.6, 17.9, 16.3, 15.2, 13.4),
weight = c(16.3, 18.1, 16.0, 19.1, 1.47, 15.7, 17.6, 17.2, 16.2, 15.2)
)
ui <- fluidPage(
sliderInput("y_intercept", "Y-Intercept", min = -20, max = 10, step = 0.1, value = 1),
sliderInput("slope", "Slope", min = 0, max = 1, step = 0.01, value = 0.5),
plotOutput("plot")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
# Create a data frame with x values
x <- HW$height
df <- data.frame(x_hw = x, y_hw = input$y_intercept + input$slope * x, data_y = HW$weight)
# Create a ggplot with a straight line
p <- ggplot(df, aes(x_hw, y_hw)) +
geom_line(aes(color = "red")) +
xlim(0, 20) +
ylim(0, 20) +
geom_point(data = HW, mapping = aes(x = height, y = weight)) +
labs(x = "height", y = "weight") +
geom_segment(mapping = aes(x = x_hw, y = data_y, xend = x_hw, yend = y_hw))
print(p)
})
}
shinyApp(ui, server)
HW <-tibble(
id = c("Lahav", "Ben", "Lia", "Haari", "Maya", "Oren", "Arie", "Lili", "Michal", "Or"),
height = c(15.1, 17.4, 14.5, 18.6, 1.28, 2.3, 17.9, 16.3, 15.2, 13.4),
weight = c(16.3, 18.1, 16.0, 19.1, 1.47, 2, 17.6, 17.2, 16.2, 15.2)
)
ui <- fluidPage(
sliderInput("y_intercept", "Y-Intercept", min = -20, max = 10, step = 0.1, value = 1),
sliderInput("slope", "Slope", min = 0, max = 1, step = 0.01, value = 0.5),
plotOutput("plot")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
# Create a data frame with x values
x <- HW$height
df <- data.frame(x_hw = x, y_hw = input$y_intercept + input$slope * x, data_y = HW$weight)
# Create a ggplot with a straight line
p <- ggplot(df, aes(x_hw, y_hw)) +
geom_line(aes(color = "red")) +
xlim(0, 20) +
ylim(0, 20) +
geom_point(data = HW, mapping = aes(x = height, y = weight)) +
labs(x = "height", y = "weight") +
geom_segment(mapping = aes(x = x_hw, y = data_y, xend = x_hw, yend = y_hw))
print(p)
})
}
shinyApp(ui, server)
HW <-tibble(
id = c("Lahav", "Ben", "Lia", "Haari", "Maya", "Oren", "Arie", "Lili", "Michal", "Or"),
height = c(18, 8, 5, 10, 3, 18, 16, 11, 4, 17),
weight = c(20, 6, 8, 12, 2, 14, 18, 10, 4, 16)
)
ui <- fluidPage(
sliderInput("y_intercept", "Y-Intercept", min = -20, max = 10, step = 0.1, value = 1),
sliderInput("slope", "Slope", min = 0, max = 1, step = 0.01, value = 0.5),
plotOutput("plot")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
# Create a data frame with x values
x <- HW$height
df <- data.frame(x_hw = x, y_hw = input$y_intercept + input$slope * x, data_y = HW$weight)
# Create a ggplot with a straight line
p <- ggplot(df, aes(x_hw, y_hw)) +
geom_line(aes(color = "red")) +
xlim(0, 20) +
ylim(0, 20) +
geom_point(data = HW, mapping = aes(x = height, y = weight)) +
labs(x = "height", y = "weight") +
geom_segment(mapping = aes(x = x_hw, y = data_y, xend = x_hw, yend = y_hw))
print(p)
})
}
shinyApp(ui, server)
ui <- fluidPage(
sliderInput("y_intercept", "Y-Intercept", min = -20, max = 10, step = 0.1, value = 1),
sliderInput("slope", "Slope", min = -1, max = 1, step = 0.01, value = 0.5),
plotOutput("plot")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
# Create a data frame with x values
x <- HW$height
df <- data.frame(x_hw = x, y_hw = input$y_intercept + input$slope * x, data_y = HW$weight)
# Create a ggplot with a straight line
p <- ggplot(df, aes(x_hw, y_hw)) +
geom_line(aes(color = "red")) +
xlim(0, 20) +
ylim(0, 20) +
geom_point(data = HW, mapping = aes(x = height, y = weight)) +
labs(x = "height", y = "weight") +
geom_segment(mapping = aes(x = x_hw, y = data_y, xend = x_hw, yend = y_hw))
print(p)
})
}
shinyApp(ui, server)
HW <-tibble(
id = c("Lahav", "Ben", "Lia", "Haari", "Maya", "Oren", "Arie", "Lili", "Michal", "Or"),
height = c(18, 8, 5, 10, 3, 20, 16, 11, 4, 17),
weight = c(20, 6, 8, 12, 2, 14, 18, 10, 4, 16)
)
ui <- fluidPage(
sliderInput("y_intercept", "Y-Intercept", min = -20, max = 10, step = 0.1, value = 1),
sliderInput("slope", "Slope", min = -1, max = 1, step = 0.01, value = 0.5),
plotOutput("plot")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
# Create a data frame with x values
x <- HW$height
df <- data.frame(x_hw = x, y_hw = input$y_intercept + input$slope * x, data_y = HW$weight)
# Create a ggplot with a straight line
p <- ggplot(df, aes(x_hw, y_hw)) +
geom_line(aes(color = "red")) +
xlim(0, 20) +
ylim(0, 20) +
geom_point(data = HW, mapping = aes(x = height, y = weight)) +
labs(x = "height", y = "weight") +
geom_segment(mapping = aes(x = x_hw, y = data_y, xend = x_hw, yend = y_hw))
print(p)
})
}
shinyApp(ui, server)
library(tidyverse)
library(plotly)
library(shiny)
HW <-tibble(
id = c("Lahav", "Ben", "Lia", "Haari", "Maya", "Oren", "Arie", "Lili", "Michal", "Or"),
height = c(18, 8, 5, 10, 3, 20, 16, 11, 4, 17),
weight = c(20, 6, 8, 12, 2, 14, 18, 10, 4, 16)
)
ui <- fluidPage(
sliderInput("y_intercept", "Y-Intercept", min = -20, max = 10, step = 0.1, value = 1),
sliderInput("slope", "Slope", min = -1, max = 1, step = 0.01, value = 0.5),
plotOutput("plot")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
# Create a data frame with x values
x <- HW$height
df <- data.frame(x_hw = x, y_hw = input$y_intercept + input$slope * x, data_y = HW$weight)
# Create a ggplot with a straight line
p <- ggplot(df, aes(x_hw, y_hw)) +
geom_line(aes(color = "red")) +
xlim(0, 20) +
ylim(0, 20) +
geom_point(data = HW, mapping = aes(x = height, y = weight)) +
labs(x = "height", y = "weight") +
geom_segment(mapping = aes(x = x_hw, y = data_y, xend = x_hw, yend = y_hw))
print(p)
})
}
shinyApp(ui, server)
)
server <- function(input, output, session) {
output$plot <- renderPlot({
# Create a data frame with x values
x <- HW$height
df <- data.frame(x_hw = x, y_hw = input$y_intercept + input$slope * x, data_y = HW$weight)
# Create a ggplot with a straight line
p <- ggplot(df, aes(x_hw, y_hw)) +
geom_line(aes(color = "red")) +
xlim(0, 20) +
ylim(0, 20) +
geom_point(data = HW, mapping = aes(x = height, y = weight)) +
labs(x = "height", y = "weight") +
geom_segment(mapping = aes(x = x_hw, y = data_y, xend = x_hw, yend = y_hw))
print(p)
})
}
ui <- fluidPage(
sliderInput("y_intercept", "Y-Intercept", min = -20, max = 10, step = 0.1, value = 10),
sliderInput("slope", "Slope", min = -1, max = 1, step = 0.01, value = 0),
plotOutput("plot")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
# Create a data frame with x values
x <- HW$height
df <- data.frame(x_hw = x, y_hw = input$y_intercept + input$slope * x, data_y = HW$weight)
# Create a ggplot with a straight line
p <- ggplot(df, aes(x_hw, y_hw)) +
geom_line(aes(color = "red")) +
xlim(0, 20) +
ylim(0, 20) +
geom_point(data = HW, mapping = aes(x = height, y = weight)) +
labs(x = "height", y = "weight") +
geom_segment(mapping = aes(x = x_hw, y = data_y, xend = x_hw, yend = y_hw))
print(p)
})
}
shinyApp(ui, server)
ui <- fluidPage(
sliderInput("y_intercept", "Y-Intercept", min = 0, max = 10, step = 0.1, value = 10),
sliderInput("slope", "Slope", min = -1, max = 1, step = 0.01, value = 0),
plotOutput("plot")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
# Create a data frame with x values
x <- HW$height
df <- data.frame(x_hw = x, y_hw = input$y_intercept + input$slope * x, data_y = HW$weight)
# Create a ggplot with a straight line
p <- ggplot(df, aes(x_hw, y_hw)) +
geom_line(aes(color = "red")) +
xlim(0, 20) +
ylim(0, 20) +
geom_point(data = HW, mapping = aes(x = height, y = weight)) +
labs(x = "height", y = "weight") +
geom_segment(mapping = aes(x = x_hw, y = data_y, xend = x_hw, yend = y_hw))
print(p)
})
}
shinyApp(ui, server)
ui <- fluidPage(
sliderInput("y_intercept", "Y-Intercept", min = 0, max = 20, step = 0.1, value = 10),
sliderInput("slope", "Slope", min = -1, max = 1, step = 0.01, value = 0),
plotOutput("plot")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
# Create a data frame with x values
x <- HW$height
df <- data.frame(x_hw = x, y_hw = input$y_intercept + input$slope * x, data_y = HW$weight)
# Create a ggplot with a straight line
p <- ggplot(df, aes(x_hw, y_hw)) +
geom_line(aes(color = "red")) +
xlim(0, 20) +
ylim(0, 20) +
geom_point(data = HW, mapping = aes(x = height, y = weight)) +
labs(x = "height", y = "weight") +
geom_segment(mapping = aes(x = x_hw, y = data_y, xend = x_hw, yend = y_hw))
print(p)
})
}
shinyApp(ui, server)
server <- function(input, output, session) {
output$plot <- renderPlot({
# Create a data frame with x values
x <- HW$height
df <- data.frame(x_hw = x, y_hw = input$y_intercept + input$slope * x, data_y = HW$weight)
# Create a ggplot with a straight line
p <- ggplot(df, aes(x_hw, y_hw)) +
geom_line(aes(color = "red")) +
xlim(0, 20) +
ylim(0, 25) +
geom_point(data = HW, mapping = aes(x = height, y = weight)) +
labs(x = "height", y = "weight") +
geom_segment(mapping = aes(x = x_hw, y = data_y, xend = x_hw, yend = y_hw))
print(p)
})
}
shinyApp(ui, server)
ui <- fluidPage(
sliderInput("y_intercept", "Y-Intercept", min = 0, max = 20, step = 0.1, value = 10),
sliderInput("slope", "Slope", min = -2, max = 2, step = 0.01, value = 0),
plotOutput("plot")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
# Create a data frame with x values
x <- HW$height
df <- data.frame(x_hw = x, y_hw = input$y_intercept + input$slope * x, data_y = HW$weight)
# Create a ggplot with a straight line
p <- ggplot(df, aes(x_hw, y_hw)) +
geom_line(aes(color = "red")) +
xlim(0, 20) +
ylim(0, 25) +
geom_point(data = HW, mapping = aes(x = height, y = weight)) +
labs(x = "height", y = "weight") +
geom_segment(mapping = aes(x = x_hw, y = data_y, xend = x_hw, yend = y_hw))
print(p)
})
}
shinyApp(ui, server)
